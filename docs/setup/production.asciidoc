[[production]]
== 生产环境中使用 Kibana

* <<configuring-kibana-shield, Using Kibana with X-Pack>>
* <<enabling-ssl, Enabling SSL>>
* <<load-balancing, Load Balancing Across Multiple Elasticsearch Nodes>>

Kibana 的配置很大程度上依赖于你的使用案例 。如果只有你使用 ，
可以在自己的机器上运行 Kibana ，配置它指向任何
你想要交互的 Elasticsearch 实例 。相反 ，如果有
大量的 Kibana 使用者 ，需要多个 Kibana 实例连接至同一个 Elasticsearch
节点 ，来保证负载均衡 。

尽管 Kibana 不是非常耗费资源 ，我们仍然建议运行 Kibana 的节点和
Elasticsearch data 或 master 节点分开 。在 Elasticsearch 集群中
分配 Kibana ， 可以在
Elasticsearch 客户端节点上运行 Kibana 。更多信息请访问
<<load-balancing, Load Balancing Across Multiple Elasticsearch Nodes>>.

[float]
[[configuring-kibana-shield]]
=== 在 X-Pack 中使用 Kibana

使用 {xpack-ref}xpack-security.html[X-Pack Security] 控制用户
通过 Kibana 可以访问哪些 Elasticsearch 数据 。

当安装 X-Pack 时 ，Kibana 用户必须登陆 。这些用户需要
有 `kibana_user` 角色来访问通过 Kibana 处理的索引库 。

如果一个用户要通过 Kibana dashboard 访问某个索引库中的数据 ，但
没有权限查看 ，他们会收到一个错误提示 ：索引
不存在 。 X-Pack 的安全机制目前还不能提供一种方法来控制不同
的用户加载不同的 dashboard 。

关于设置 Kibana 用户和 Kibana
在 X-Pack 运行的信息 ， 参见 {xpack-ref}kibana.html.

[float]
[[enabling-ssl]]
=== 启用 SSL
不管是客户端的请求 ，还是 Kibana 服务端发给 Elasticsearch 的请求 ，Kibana 都支持 SSL 加密 。

要加密浏览器和 Kibana 服务等的会话 ，配置 `kibana.yml` 文件中的 `server.ssl.enabled`,
`server.ssl.certificate` 和 `server.ssl.key` 属性 ：

[source,text]
----
# SSL for outgoing requests from the Kibana Server (PEM formatted)
server.ssl.enabled: true
server.ssl.key: /path/to/your/server.key
server.ssl.certificate: /path/to/your/server.crt
----

如果 Elasticsearch 使用 X-Pack 安全协议或者可以提供 HTTPS 代理的终端 。
设置 Kibana 通过 HTTPS 访问 Elasticsearch ，这样
Kibana 服务端和 Elasticsearch 的会话就会加密 。

要这样做 ，就得在配置文件 `kibana.yml` 中设置  Elasticsearch URL 指定 HTTPS
协议 ：

[source,text]
----
elasticsearch.url: "https://<your_elasticsearch_host>.com:9200"
----

如果 Elasticsearch 使用了自签名证书 ，设置 `kibana.yml` 文件中的 `certificateAuthorities` 属性
指向 PEM 文件的位置 ， 设置 `certificateAuthorities` 属性可以使用
默认的 `verificationMode` 选项 `full` 。

[source,text]
----
# If you need to provide a CA certificate for your Elasticsearch instance, put
# the path of the pem file here.
elasticsearch.ssl.certificateAuthorities: [ "/path/to/your/ca/cacert.pem" ]
----

[float]
[[load-balancing]]
=== 多个 Elasticsearch 节点间的负载均衡
如果 Elasticsearch 集群有多个节点 , 分发 Kibana 节点之间请求的最简单的方法
就是在 Kibana 机器上运行一个 Elasticsearch _Coordinating only_ node 。
Elasticsearch Coordinating only nodes 本质上是智能负载均衡器 ，也是集群的一部分 ，如果有需要 ，
这些节点会处理传入 HTTP 请求 ，重定向操作给集群中其他节点 ，
收集并返回结果 。 更多详细信息 ，请查看 Elasticsearch 参考
{es-ref}modules-node.html[Node] 。

使用本地客户端节点负载均衡 Kibana 请求 ：

. 在安装 Kibana 的机器上安装 Elasticsearch 
. 配置节点为 Coordinating only node 。在配置文件 `elasticsearch.yml` 中，设置 `node.data`, `node.master` 和 `node.ingest` 为 `false`：
+
--------
# 3. You want this node to be neither master nor data node nor ingest node, but
#    to act as a "search load balancer" (fetching data from nodes,
#    aggregating results, etc.)
#
node.master: false
node.data: false
node.ingest: false 
--------
. 设置客户端节点接入 Elasticsearch 集群 。 在配置文件 `elasticsearch.yml` 中 ， 设置 `cluster.name` 为集群名字 。
+
--------
cluster.name: "my_cluster"
--------
. 检查 `elasticsearch.yml` 中的 transport 和 HTTP 主机配置： `network.host` 和 `transport.host` 。`transport.host` 需要为集群中其他成员网络可达的 ，`network.host` 是连接 Kibana 的 HTTP 网络连接(默认为localhost:9200 ) 。
+
--------
network.host: localhost
http.port: 9200

# by default transport.host refers to network.host
transport.host: <external ip>
transport.tcp.port: 9300 - 9400
--------
. 确认 Kibana 设置为指向本地客户端节点 。在配置文件 `kibana.yml` 中 ，`elasticsearch.url` 应设为
`localhost:9200` 。
+
--------
# The Elasticsearch instance to use for all your queries.
elasticsearch.url: "http://localhost:9200"
--------
